package com.scene7.is.qa;

import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;

/**
 * Make requests to a utility and validate the response.
 * @author cbrann
 * @since 2012-06-01
 * 
 */
public class UtilityHandler {
	public static String PORT = "8080";
	public static String COMMENT = "#";
	public static String outputPath = "/tmp/imgcheck/";
	public static String fileNameFormat = "yyyyMMddhhmmss.SSSS";
	public static String tiffMd5sumPath = "/home/jenkins/lib/ImageServing/bin64/TiffMd5sum";
	public static String tiffMd5Utility = "TIFF_MD5_UTILITY";
	public static String macMd5Utility = "/sbin/md5";
	public static String linuxMd5Utility = "/usr/bin/md5sum";
	

	/**
	 * Execute an arbitrary command using .exec call. The output of the command is a file in the /tmp directory.
	 * The output file is processed with TiffMd5sum, and the result compared to the reference parameter
	 * If the results match the reference the temporary file is removed from the /tmp directory.
	 * If the results don't match the temporary file is left in place and the name is passed to the
	 * calling test.
	 * @param utilityCommand
	 * @param reference
	 * @return
	 * @author cbrann
	 * @since 2012-06-02
	 */
	public String convertFile(String utilityCommand, String reference) {
		String error = "";
		StringBuffer sb = new StringBuffer();
		StringBuffer errBuff = new StringBuffer();
		String s = null;
		OutputHandler out = new OutputHandler();
		try {
			// Create a file name
			String outFileName = makeFileName();
			// Execute the utility command
			Process p = Runtime.getRuntime().exec(utilityCommand + " " + outFileName);
			// Get any error output
			BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));
			BufferedReader stdError = new BufferedReader(new InputStreamReader(p.getErrorStream()));
			// Capture runtime errors
			while ((s = stdError.readLine()) != null) {
				error = error + "Error: " + utilityCommand + " returned: \n" + s;
			}
			// Check that we generated an output file
			if (!(new File(outFileName)).exists()){
				error = error + "\nMissing converted file: " + outFileName;
			}
			// Get TiffMd5sum of output file
			p = Runtime.getRuntime().exec(tiffMd5sumPath + " " + outFileName);
			stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));
			stdError = new BufferedReader(new InputStreamReader(p.getErrorStream()));
			sb.append(stdInput.readLine());
			errBuff.append(stdError.readLine());
			// Compare calculated and reference values.
			// If they match clean up the output file and return empty error string.
			if (reference.contentEquals(sb.toString())){
				// test passed, so clear errors and cleanup
				error = "";
				out.removeFile(outFileName);
			} else {
				sb.append(" - calculated sum does not match reference: " + reference);
				sb.append(error);
				sb.append("\nConverted file: ");
				sb.append(outFileName);
				error = sb.toString();
			}
		} catch (Exception e) {
			error = error + "\n" + e.getMessage();
		}
		return error;
	}

	//String errorMsg = uHandler.convertTrailingOptions(UTILITY_PATH, sourceFile, options, reference);
//	public String processFileTrailingOptions(String utilityCommand,  String source, String options, String reference) {

	public String convertTrailingOptions(String utilityCommand, String source, String options, String reference) {
		String error = "";
		StringBuffer sb = new StringBuffer();
		StringBuffer errBuff = new StringBuffer();
		String s = null;
		OutputHandler out = new OutputHandler();
		try {
			// Create a file name
			String outFileName = makeFileName();
			// Execute the utility command
			Process p = Runtime.getRuntime().exec(utilityCommand + " " + source + " " + outFileName + " " + options);
			// Get any error output
			BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));
			BufferedReader stdError = new BufferedReader(new InputStreamReader(p.getErrorStream()));
			// Capture runtime errors
			while ((s = stdError.readLine()) != null) {
				error = error + "Error: " + utilityCommand + " returned: \n" + s;
			}
			// Check that we generated an output file
			if (!(new File(outFileName)).exists()){
				error = error + "\nMissing converted file: " + outFileName;
			}
			// Get TiffMd5sum of output file
			p = Runtime.getRuntime().exec(tiffMd5sumPath + " " + outFileName);
			stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));
			stdError = new BufferedReader(new InputStreamReader(p.getErrorStream()));
			sb.append(stdInput.readLine());
			errBuff.append(stdError.readLine());
			// Compare calculated and reference values.
			// If they match clean up the output file and return empty error string.
			if (reference.contentEquals(sb.toString())){
				// test passed, so clear errors and cleanup
				error = "";
				out.removeFile(outFileName);
			} else {
				sb.append(" - calculated sum does not match reference: " + reference);
				sb.append(error);
				sb.append("\nConverted file: ");
				sb.append(outFileName);
				error = sb.toString();
			}
		} catch (Exception e) {
			error = error + "\n" + e.getMessage();
		}
		return error;
	}


//	String errorMsg		= uHandler.convertFile(UTILITY_PATH + " " + options + " " + srcFile, reference);
//	public String processFile(String utilityCommand,  String options, String source, String reference) {

	public String processFileTiff(String utilityCommand, String reference) {
		String error = "";
		StringBuffer errBuff = new StringBuffer();
		String sum = "";
		OutputHandler out = new OutputHandler();
		String[] utilityOut = {"",""};
		try {
			// Create a file name
			String outFileName = makeFileName();
			// Execute the utility command
			utilityOut = executeCommand(utilityCommand, outFileName);
			// Check that we generated an output file
			if (!(new File(outFileName)).exists()){
				error = error + "\nMissing converted file: " + outFileName;
			}
			// Get TiffMd5sum of output file
//			sum = this.getMd5(outFileName);
			sum = this.getTiffMd5(outFileName);
			if (reference.contentEquals(sum.trim())){
				// test passed, so clear errors and cleanup
				error = "";
				out.removeFile(outFileName);
			} else {
				// Create JUnit failure statement
				errBuff.append("Error - calculated sum: " + sum + " does not match reference: " + reference);
				errBuff.append("\n");
				errBuff.append(utilityOut[1]);
				errBuff.append("\nConverted file: ");
				errBuff.append(outFileName);
				error = errBuff.toString();
			}
		} catch (Exception e) {
			error = error + "\n" + e.getMessage();
		}
		return error;
	}
	
	public String processFileTiffTrailingOptions(String utilityCommand,  String source, String options, String reference) {
		String error = "";
		StringBuffer errBuff = new StringBuffer();
		String sum = "";
		OutputHandler out = new OutputHandler();
		String[] utilityOut = {"",""};
		try {
			// Create a file name
			String outFileName = makeFileName();
			// Execute the utility command
			utilityOut = convertFileTrailingOptions(utilityCommand, source, outFileName, options);
			// Check that we generated an output file
			if (!(new File(outFileName)).exists()){
				error = error + "\nMissing converted file: " + outFileName;
			}
			// Get TiffMd5sum of output file
//			sum = this.getMd5(outFileName);
			sum = this.getTiffMd5(outFileName);
			if (reference.contentEquals(sum.trim())){
				// test passed, so clear errors and cleanup
				error = "";
				out.removeFile(outFileName);
			} else {
				// Create JUnit failure statement
				errBuff.append("Error - calculated sum: " + sum + " does not match reference: " + reference);
				errBuff.append("\n");
				errBuff.append(utilityOut[1]);
				errBuff.append("\nConverted file: ");
				errBuff.append(outFileName);
				error = errBuff.toString();
			}
		} catch (Exception e) {
			error = error + "\n" + e.getMessage();
		}
		return error;
	}
	
	public String[] executeCommand(String utilityCommand, String outFileName){
		String[] out = {"",""};
		String output = "";
		String error = "";
		try {
			// Execute the utility command
			Process p = Runtime.getRuntime().exec(utilityCommand + " " + outFileName);
			// Get output
			BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));
			BufferedReader stdError = new BufferedReader(new InputStreamReader(p.getErrorStream()));
			// Capture runtime errors
			while ((output = stdError.readLine()) != null) {
				error = error + output;
			}
			out[0] = stdInput.readLine();
			out[1] = error;
		} catch (Exception e) {
			out[1] = out[1] + "\n" + e.getMessage();
		}
		return out;
	}

	
	public String[] convertFileTrailingOptions(String utilityCommand, String source, String outFileName, String options){
		String[] out = {"",""};
		String output = "";
		String error = "";
		try {
			// Execute the utility command
			Process p = Runtime.getRuntime().exec(utilityCommand + " " + source + " " + outFileName + " " + options);
			// Get output
			BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));
			BufferedReader stdError = new BufferedReader(new InputStreamReader(p.getErrorStream()));
			// Capture runtime errors
			while ((output = stdError.readLine()) != null) {
				error = error + output;
			}
			out[0] = stdInput.readLine();
			out[1] = error;
		} catch (Exception e) {
			out[1] = out[1] + "\n" + e.getMessage();
		}
		return out;
	}
	

	/**
	 * Execute Scene7 utility TiffMd5Sum
	 * @param outFileName
	 * @return TiffMd5Sum
	 */
	public String getTiffMd5(String outFileName){
		String output = "";
		String error = "";
		String sum = "";
		StringBuffer inBuff = new StringBuffer();
		StringBuffer outBuff = new StringBuffer();
		try {
			// Execute the utility command
			Process p = Runtime.getRuntime().exec(UtilityHandler.tiffMd5sumPath + " " + outFileName);
			// Get output
			BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));
			BufferedReader stdError = new BufferedReader(new InputStreamReader(p.getErrorStream()));
			// Capture runtime errors
			while ((output = stdError.readLine()) != null) {
				outBuff.append(output);
			}
			inBuff.append(stdInput.readLine());
			sum = inBuff.toString();
			error = outBuff.toString();
			if (error.length() > 0) {
				sum = sum + error;
			}
		} catch (Exception e) {
			sum = sum + "\n" + e.getMessage();
		}
		return sum.trim();
	}

	/**
	 * Execute basic Red Hat md5sum and return sum
	 * @param outFileName
	 * @return standard md5 sum
	 */
	public String getMd5(String outFileName){
		String output = "";
		String error = "";
		String sum = "";
		StringBuffer inBuff = new StringBuffer();
		StringBuffer outBuff = new StringBuffer();
		try {
			// Execute the utility command
			Process p = Runtime.getRuntime().exec(UtilityHandler.linuxMd5Utility + " " + outFileName);
			// Get output
			BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));
			BufferedReader stdError = new BufferedReader(new InputStreamReader(p.getErrorStream()));
			// Capture runtime errors
			while ((output = stdError.readLine()) != null) {
				outBuff.append(output);
			}
			inBuff.append(stdInput.readLine());
			sum = inBuff.toString().split("\\s+")[0];
			error = outBuff.toString();
			if (error.length() > 0) {
				sum = sum + "error: " + error;
			}
		} catch (Exception e) {
			sum = sum + "\n" + e.getMessage();
		}
		return sum.trim();
	}

	
	public String makeFileName(){
		String path = null;
		SimpleDateFormat formatter = new SimpleDateFormat(fileNameFormat);
		Date now = new Date();
		path = outputPath + "test_" + formatter.format(now);
		return path;
	}	
	
}
